/*
 * Copyright 2008-present MongoDB, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:3.0.3'
        classpath 'biz.aQute.bnd:biz.aQute.bnd.gradle:4.3.1'

        // Scala plugins
        classpath "com.adtran:scala-multiversion-plugin:1.0.35"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:3.27.1"
    }
}

plugins {
    // including this plugin directly instead of by an init script, which allows to use the freshly build version
    id 'org.jboss.gm.manipulation'
    id 'maven-publish'
}
allprojects {
    apply plugin: 'org.jboss.gm.manipulation'
}


//////////////////////////////////////////
// Common behavior                      //
//////////////////////////////////////////

ext {
    configDir = new File(rootDir, 'config')
    jnrUnixsocketVersion = '0.18'
    nettyVersion = '4.1.43.Final'
    snappyVersion = '1.1.4'
    zstdVersion = '1.3.8-3'
    mongoCryptVersion = '1.0.1'
    gitVersion = "" // getGitVersion()
}

def configDir = ext.configDir
def coreProjects = subprojects.findAll { !['util'].contains(it.name) }
def javaProjects = subprojects.findAll { !it.name.contains('scala') }
def scalaProjects = subprojects.findAll { it.name.contains('scala') }
def javaMainProjects = javaProjects.findAll { !['util'].contains(it.name) }
def javaCodeCheckedProjects = javaMainProjects.findAll { !['driver-benchmarks'].contains(it.name) }

configure(coreProjects) {
    apply plugin: 'idea'

//     evaluationDependsOn(':util')
    group = 'org.mongodb'
    version = '4.1.0.temporary-redhat-00001'

    repositories {
        mavenLocal()
        google()
        mavenCentral()
    }
}

configure(javaProjects) {
    apply plugin: 'java-library'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    sourceSets {
        main {
            java.srcDirs = ['src/main']
        }
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }
}

configure(scalaProjects) {
    apply plugin: 'scala'
    apply plugin: 'idea'
    apply plugin: "com.adtran.scala-multiversion-plugin"
    apply plugin: "com.diffplug.gradle.spotless"

    group = 'org.mongodb.scala'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    dependencies {
        implementation ('org.scala-lang:scala-library:%scala-version%')
        implementation ('org.scala-lang:scala-reflect:%scala-version%')

        testImplementation('junit:junit:4.12')
        testImplementation('org.scalatest:scalatest_%%:3.0.8')
        testImplementation('org.scalamock:scalamock_%%:4.4.0')
        testImplementation('ch.qos.logback:logback-classic:1.1.3')
        testImplementation('org.reflections:reflections:0.9.10')
    }


    spotless {
        scala {
            scalafmt('2.0.0').configFile("$configDir/scalafmt.conf")
        }
    }
    compileScala.dependsOn('spotlessApply')
    compileTestScala.dependsOn('spotlessApply')

    tasks.withType(ScalaCompile) {
        scalaCompileOptions.deprecation = false
    }

    if (project.scalaVersion.startsWith("2.13")) {
        scaladoc {
            scalaClasspath += files("$rootDir/gradle/scala/lib/scala-ant-2.13.1.jar")
        }
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }
}

configure(javaMainProjects) {
    apply plugin: 'nebula.optional-base'
    apply plugin: 'java-library'

    dependencies {
        compileOnly 'com.google.code.findbugs:jsr305:1.3.9'
        api 'org.slf4j:slf4j-api:1.7.6', optional
        testImplementation 'com.google.code.findbugs:jsr305:1.3.9'
    }

    /* Compiling */
    tasks.withType(AbstractCompile) {
        options.encoding = 'ISO-8859-1'
        options.fork = true
        options.debug = true
        options.compilerArgs = ['-Xlint:all']
    }
}

configure(javaCodeCheckedProjects) {
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'
    apply plugin: 'groovy'
    apply plugin: 'codenarc'

    dependencies {
        testImplementation 'org.codehaus.groovy:groovy-all:2.4.15'
        testImplementation 'org.spockframework:spock-core:1.1-groovy-2.4'
        testImplementation 'cglib:cglib-nodep:2.2.2'
        testImplementation 'org.objenesis:objenesis:1.3'
        testImplementation 'org.hamcrest:hamcrest-all:1.3'
        testImplementation 'ch.qos.logback:logback-classic:1.1.1'
//        testImplementation project(':util') //Adding categories to classpath
    }

    sourceSets {
        test {
            groovy.srcDirs = ['src/test/functional', 'src/test/unit', 'src/test/tck']
        }
    }

    /* Testing */
    tasks.withType(Test) {
        maxHeapSize = "4g"
        maxParallelForks = 1

        systemProperties(
                'org.mongodb.test.uri': System.getProperty('org.mongodb.test.uri'),
                'org.mongodb.test.transaction.uri': System.getProperty('org.mongodb.test.transaction.uri'),
                'org.mongodb.useSocket': System.getProperty('org.mongodb.useSocket', 'false'),
                'org.mongodb.disableAsync': System.getProperty('org.mongodb.disableAsync', 'false'),
                'org.mongodb.test.async.type': System.getProperty('org.mongodb.test.async.type', 'nio2'),
                'org.mongodb.test.awsAccessKeyId': System.getProperty('org.mongodb.test.awsAccessKeyId'),
                'org.mongodb.test.awsSecretAccessKey': System.getProperty('org.mongodb.test.awsSecretAccessKey'),
                'jna.library.path': System.getProperty('jna.library.path')
        )

        project.ext.buildingWith = { propertyName ->
            project.hasProperty(propertyName) && project.property(propertyName).toBoolean()
        }

        if (project.buildingWith('ssl.enabled')) {
            if (project.hasProperty('ssl.keyStoreType')) {
                systemProperties(
                        'javax.net.ssl.keyStoreType': project.property('ssl.keyStoreType'),
                        'javax.net.ssl.keyStore': project.property('ssl.keyStore'),
                        'javax.net.ssl.keyStorePassword': project.property('ssl.keyStorePassword')
                )
            }
            if (project.hasProperty('ssl.trustStoreType')) {
                systemProperties(
                        'javax.net.ssl.trustStoreType': project.property('ssl.trustStoreType'),
                        'javax.net.ssl.trustStore': project.property('ssl.trustStore'),
                        'javax.net.ssl.trustStorePassword': project.property('ssl.trustStorePassword')
                )
            }
            if (project.hasProperty('ocsp.property')) {
                systemProperties(
                    'org.mongodb.test.ocsp.tls.should.succeed': project.property('ocsp.tls.should.succeed'),
                    'java.security.properties': file(project.property('ocsp.property')),
                    'com.sun.net.ssl.checkRevocation': project.property('ssl.checkRevocation'),
                    'jdk.tls.client.enableStatusRequestExtension': project.property('client.enableStatusRequestExtension'),
                    'jdk.tls.client.protocols': project.property('client.protocols')
                )
            }
        }

        if (project.buildingWith('gssapi.enabled')) {
            systemProperties(
                    'sun.security.krb5.debug': project.getProperty('sun.security.krb5.debug'),
                    'javax.security.auth.useSubjectCredsOnly': "false",
                    'java.security.krb5.kdc': project.getProperty('krb5.kdc'),
                    'java.security.krb5.realm': project.getProperty('krb5.realm'),
                    'java.security.auth.login.config': project.getProperty('auth.login.config'),
                    )
        }

        useJUnit {
            excludeCategories 'category.Slow'
        }

        jacoco { enabled = false }

        testLogging { exceptionFormat = 'full' }
    }

    task testSlowOnly(type: Test) {
        useJUnit {
            includeCategories 'category.Slow'
        }
    }

    gradle.taskGraph.whenReady { taskGraph ->
        if (taskGraph.hasTask(testCoverage)) {
            tasks.withType(Test) { jacoco { enabled = true } }
        }
    }

    task testCoverage(dependsOn: test)

    /* Code quality */
    tasks.withType(Checkstyle) {
        reports {
            xml.enabled true
            html.enabled true
        }
    }

    checkstyle {
        toolVersion = "7.4"
        configFile = new File(configDir, 'checkstyle.xml')
        configProperties.checkstyleConfigDir = configDir
    }

    codenarc {
        toolVersion = '1.1'
        reportFormat = project.buildingWith('xmlReports.enabled') ? 'xml' : 'html'
    }

    tasks.withType(Test) {
        def jdkHome = findProperty("jdkHome")
        if (jdkHome) {
            def javaExecutablesPath = new File(jdkHome, 'bin')
            def javaExecutables = [:].withDefault { execName ->
                def executable = new File(javaExecutablesPath, execName)
                assert executable.exists() : "There is no ${execName} executable in ${javaExecutablesPath}"
                executable
            }
            executable = javaExecutables.java
        }
    }
}

apply from: 'gradle/publish.gradle'
// apply from: 'gradle/deploy.gradle'
// apply from: 'gradle/javadoc.gradle'
// apply from: 'gradle/testColorOutput.gradle'


//////////////////////////////////////////
// Root project configuration           //
//////////////////////////////////////////
wrapper {
    gradleVersion = '6.0.1'
}

//if (!JavaVersion.current().isJava9Compatible()) {
//    throw new GradleException("""
//        | ERROR:
//        | JDK ${JavaVersion.VERSION_1_9.getMajorVersion()} is required to build the driver: You are using JDK ${JavaVersion.current().getMajorVersion()}.
//        |""".stripMargin()
//    )
//}
